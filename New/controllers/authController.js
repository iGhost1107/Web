const jwt = require('jsonwebtoken');
const pool = require('../config/db');
const bcrypt = require('bcrypt');

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
    const { email, password } = req.body;
    console.log('Email:', email);
    try {
        const [rows] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
        const user = rows[0];

        if (!user) {
            return res.status(401).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
        }

        const token = jwt.sign(
            { id: user.id, email: user.email },
            process.env.JWT_SECRET,
            { expiresIn: '1d' }
        );
        res.json({ token });  // login.js y√™u c·∫ßu token
    } catch (err) {
        res.status(500).json({ message: 'L·ªói server', error: err });
    }
};

// ƒêƒÉng k√Ω
exports.register = async (req, res) => {
    const { email, password } = req.body;
    console.log('Email:', email);
    try {
        const [rows] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
        if (rows.length > 0) {
            return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        await pool.query('INSERT INTO users (email, password) VALUES (?, ?)', [email, hashedPassword]);
        res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng' }); // login.js s·∫Ω alert(message)
    } catch (error) {
        console.error('L·ªói m√°y ch·ªß:', error.message || error);
        res.status(500).json({
            message: 'L·ªói m√°y ch·ªß',
            error: error.message || 'Kh√¥ng x√°c ƒë·ªãnh'
        });
    }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
exports.getMe = async (req, res) => {
    try {
        const [rows] = await pool.query(
            'SELECT id, email, username, phonenumber, address, role, cardnumber, cardmonth, cardyear, cardday FROM users WHERE id = ?',
            [req.user.id]
        );

        if (!rows.length) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        res.json(rows[0]);
    } catch (err) {
        res.status(500).json({ message: 'L·ªói server', error: err });
    }
};

// ƒê·ªïi m·∫≠t kh·∫©u
exports.changePassword = async (req, res) => {
    const { email, oldPassword, newPassword } = req.body;

    try {
        const [users] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
        if (users.length === 0) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        const user = users[0];

        console.log('So s√°nh:', {
            oldPassword,
            hashedPassword: user.password
        });

        const isMatch = await bcrypt.compare(oldPassword, user.password);
        console.log('‚úÖ isMatch:', isMatch);
    if (!isMatch) {
            return res.status(400).json({ message: 'M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c' });
        }

        const hashedNewPassword = await bcrypt.hash(newPassword, 10);
        await pool.query('UPDATE users SET password = ? WHERE email = ?', [hashedNewPassword, email]);

        res.json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });

    } catch (error) {
        console.error('üî• L·ªói m√°y ch·ªß:', error.message || error);
        return res.status(500).json({
            message: 'L·ªói m√°y ch·ªß',
            error: error.message || 'Kh√¥ng x√°c ƒë·ªãnh'
        });
    }
};


// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateUserInfo = async (req, res) => {
    const userId = req.user.id;
    const { username, phonenumber, address, cardnumber, cardmonth, cardyear, cardday } = req.body;

    try {
        await pool.query(
            'UPDATE users SET username = ?, phonenumber = ?, address = ?, cardnumber = ?, cardmonth = ?, cardyear = ?, cardday = ? WHERE id = ?',
            [username, phonenumber, address, cardnumber, cardmonth, cardyear, cardday, userId]
        );

        res.json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng' });
    } catch (err) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t th√¥ng tin:', err);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: err });
    }
};

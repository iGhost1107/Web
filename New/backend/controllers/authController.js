const jwt = require('jsonwebtoken');
const pool = require('../config/db');
const bcrypt = require('bcrypt');

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
  const { email, password } = req.body;

  try {
    const [rows] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
    const user = rows[0];

    if (!user) {
      return res.status(401).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
    }

    if (!user.is_verified) {
      return res.status(403).json({ message: 'T√†i kho·∫£n ch∆∞a x√°c th·ª±c.', isVerified: false });
    }

    const token = jwt.sign(
      { id: user.id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '1d' }
    );

    res.json({ token, isVerified: true }); // ‚úÖ g·ª≠i r√µ isVerified
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server', error: err });
  }
};


// ƒêƒÉng k√Ω
// exports.register = async (req, res) => {
//     const { email, password } = req.body;
//     console.log('Email:', email);
//     try {
//         const [rows] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
//         if (rows.length > 0) {
//             return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i' });
//         }

//         const hashedPassword = await bcrypt.hash(password, 10);
//         await pool.query('INSERT INTO users (email, password) VALUES (?, ?)', [email, hashedPassword]);
//         res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng' }); // login.js s·∫Ω alert(message)
//     } catch (error) {
//         console.error('L·ªói m√°y ch·ªß:', error.message || error);
//         res.status(500).json({
//             message: 'L·ªói m√°y ch·ªß',
//             error: error.message || 'Kh√¥ng x√°c ƒë·ªãnh'
//         });
//     }
// };

const crypto = require('crypto');
const nodemailer = require('nodemailer');
require('dotenv').config();


exports.register = async (req, res) => {
    const { email, password } = req.body;
  
    try {
      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const [existing] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
      if (existing.length > 0) {
        return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω' });
      }
  
      // ‚úÖ M√£ h√≥a m·∫≠t kh·∫©u
      const hashedPassword = await bcrypt.hash(password, 10);
  
      // T·∫°o token x√°c th·ª±c
      const token = crypto.randomBytes(32).toString('hex');
  
      // L∆∞u v√†o CSDL
      await pool.query(
        'INSERT INTO users (email, password, is_verified, email_token) VALUES (?, ?, ?, ?)',
        [email, hashedPassword, false, token]
      );
  
      // G·ª≠i email x√°c th·ª±c
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.MAIL_USER,
          pass: process.env.MAIL_PASS,
        }
      });
  
      const baseUrl = process.env.BASE_URL || 'http://localhost:3000';
      const verifyUrl = `${baseUrl}/api/auth/verify-email?token=${token}`;

  
      await transporter.sendMail({
        from: 'X√°c th·ª±c t√†i kho·∫£n web b√°n linh ki·ªán ƒëi·ªán t·ª≠ <' + process.env.MAIL_USER + '>',
        to: email,
        subject: 'X√°c th·ª±c t√†i kho·∫£n',
        html: `<p>Vui l√≤ng nh·∫•n v√†o link d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n:</p><a href="${verifyUrl}">${verifyUrl}</a>`
      });
  
      res.status(200).json({ message: 'Vui l√≤ng x√°c th·ª±c ƒë·ªÉ ƒëƒÉng k√Ω th√†nh c√¥ng!' });
    } catch (err) {
      console.error('L·ªói khi ƒëƒÉng k√Ω:', err);
      res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói server.' });
    }
  };
    
  exports.verifyEmail = async (req, res) => {
    const { token } = req.query;
  
    try {
      const [users] = await pool.query('SELECT * FROM users WHERE email_token = ?', [token]);
      if (users.length === 0) {
        return res.status(400).send('Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.');
      }
  
      await pool.query('UPDATE users SET is_verified = ?, email_token = NULL WHERE email_token = ?', [true, token]);
      res.send('X√°c th·ª±c email th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p.');
    } catch (err) {
      console.error('L·ªói x√°c th·ª±c:', err);
      res.status(500).send('L·ªói server trong qu√° tr√¨nh x√°c th·ª±c.');
    }
  };

  // n√∫t g·ª≠i l·∫°i x√°c th·ª±c email
exports.resendVerification = async (req, res) => {
  const { email } = req.body;

  try {
    const [rows] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
    const user = rows[0];

    // ·∫®n th√¥ng tin n·∫øu user kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ x√°c th·ª±c
    if (!user || user.is_verified) {
      return res.status(200).json({ message: "N·∫øu email h·ª£p l·ªá, h·ªá th·ªëng s·∫Ω g·ª≠i l·∫°i email x√°c th·ª±c." });
    }

    // N·∫øu h·ª£p l·ªá ‚Üí ti·∫øp t·ª•c g·ª≠i l·∫°i token
    const token = crypto.randomBytes(32).toString('hex');
    await pool.query('UPDATE users SET email_token = ? WHERE email = ?', [token, email]);

    // ... G·ª≠i l·∫°i email nh∆∞ c≈©
    const verifyUrl = `${process.env.BASE_URL}/api/auth/verify-email?token=${token}`;

    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.MAIL_USER,
        pass: process.env.MAIL_PASS
      }
    });

    await transporter.sendMail({
      from: `X√°c th·ª±c t√†i kho·∫£n <${process.env.MAIL_USER}>`,
      to: email,
      subject: 'G·ª≠i l·∫°i email x√°c th·ª±c',
      html: `<p>B·∫°n ƒë√£ y√™u c·∫ßu g·ª≠i l·∫°i email x√°c th·ª±c.</p><a href="${verifyUrl}">${verifyUrl}</a>`
    });

    res.status(200).json({ message: "N·∫øu email h·ª£p l·ªá, h·ªá th·ªëng s·∫Ω g·ª≠i l·∫°i email x√°c th·ª±c." });
  } catch (err) {
    console.error('L·ªói resend email:', err);
    res.status(500).json({ message: 'L·ªói server khi g·ª≠i l·∫°i email.' });
  }
};
  
// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
exports.getMe = async (req, res) => {
    try {
        const [rows] = await pool.query(
            'SELECT id, email, username, phonenumber, address, role, cardnumber, cardmonth, cardyear, cardday FROM users WHERE id = ?',
            [req.user.id]
        );

        if (!rows.length) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        res.json(rows[0]);
    } catch (err) {
        res.status(500).json({ message: 'L·ªói server', error: err });
    }
};

// ƒê·ªïi m·∫≠t kh·∫©u
exports.changePassword = async (req, res) => {
    const { email, oldPassword, newPassword } = req.body;

    try {
        const [users] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);
        if (users.length === 0) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        const user = users[0];

        console.log('So s√°nh:', {
            oldPassword,
            hashedPassword: user.password
        });

        const isMatch = await bcrypt.compare(oldPassword, user.password);
        console.log('‚úÖ isMatch:', isMatch);
    if (!isMatch) {
            return res.status(400).json({ message: 'M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c' });
        }

        const hashedNewPassword = await bcrypt.hash(newPassword, 10);
        await pool.query('UPDATE users SET password = ? WHERE email = ?', [hashedNewPassword, email]);

        res.json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });

    } catch (error) {
        console.error('üî• L·ªói m√°y ch·ªß:', error.message || error);
        return res.status(500).json({
            message: 'L·ªói m√°y ch·ªß',
            error: error.message || 'Kh√¥ng x√°c ƒë·ªãnh'
        });
    }
};


// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateUserInfo = async (req, res) => {
    const userId = req.user.id;
    const { username, phonenumber, address, cardnumber, cardmonth, cardyear, cardday } = req.body;

    try {
        await pool.query(
            'UPDATE users SET username = ?, phonenumber = ?, address = ?, cardnumber = ?, cardmonth = ?, cardyear = ?, cardday = ? WHERE id = ?',
            [username, phonenumber, address, cardnumber, cardmonth, cardyear, cardday, userId]
        );

        res.json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng' });
    } catch (err) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t th√¥ng tin:', err);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß', error: err });
    }
};
